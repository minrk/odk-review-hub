jupyterhub:
  proxy:
    nodeSelector:
      cloud.google.com/gke-nodepool: default-pool
    service:
      type: ClusterIP
  ingress:
    enabled: true
    annotations:
      ingress.kubernetes.io/proxy-body-size: 64m
      kubernetes.io/ingress.class: nginx
      cert-manager.io/issuer: "letsencrypt-prod"
    hosts:
      - lorentz.minrk.net
    tls:
      - secretName: tls-jupyterhub
        hosts:
          - lorentz.minrk.net
  auth:
    type: github
    admin:
      access: true
      users:
        - minrk
    github:
      callbackUrl: "https://lorentz.minrk.net/hub/oauth_callback"

  singleuser:
    cmd: jupyter-labhub
    events: true
    storage:
      homeMountPath: /home/user
    image:
      name: gcr.io/jupyter-simula/k8s-singleuser
      tag: '0.0.1-127.1dc78bd'
      pullPolicy: Always
    startTimeout: 600
    lifecycleHooks:
      postStart:
        exec:
          command:
            - gitpuller
            - https://github.com/tomography/tomopy-short-course
            - master
            - tomopy-short-course
    # extraNodeAffinity:
    #   preferred:
    #     - weight: 100
    #       preference:
    #         matchExpressions:
    #           - key: jupyterhub-node
    #             operator: NotIn
    #             values:
    #               - hpc
    # profileList:
    #   - display_name: "Default"
    #     description: "The default environment, with SageMath and JupyterLab, light\
    #       \ resources"
    #     default: true
    #   - display_name: "4 CPUs"
    #     description: "The default SageMath environment, but with 4 CPUs available"
    #     kubespawner_override:
    #       cpu_guarantee: 4
    #       cpu_limit: 4
    #   - display_name: "Big"
    #     description: "The default SageMath environment, but with 32 CPUs available"
    #     kubespawner_override:
    #       cpu_guarantee: 8
    #       cpu_limit: 16
    #       mem_limit: 8G
    #       node_affinity_required:
    #         - matchExpressions:
    #             - key: jupyterhub-node
    #               operator: In
    #               values:
    #                 - hpc
    #   - display_name: "GAP"
    #     description: "GAP demo environment, stable version"
    #     kubespawner_override:
    #       image: gcr.io/simula-odk/k8s-gap:0.0.1-113.bd29be8
    #       cpu_guarantee: 0.75
    #       cpu_limit: 1
    #       mem_limit: 4G
    #       mem_guarantee: 1G
    #   - display_name: "GAP (master)"
    #     description: "GAP demo environment, latest development version"
    #     kubespawner_override:
    #       image: gcr.io/simula-odk/k8s-gap-master:0.0.1-119.fba88fd
    #       cpu_guarantee: 9
    #       cpu_limit: 16
    #       mem_guarantee: 16G
    #       mem_limit: 32G
    #   - display_name: "Singular Parallel (lite)"
    #     description: "Singular Parallel demo environment, with only 4 cpus"
    #     kubespawner_override:
    #       image: gcr.io/simula-odk/k8s-singular:0.0.1-111.92d59fa
    #       cpu_guarantee: 4
    #       cpu_limit: 4
    #   - display_name: "Singular Parallel"
    #     description: "Singular Parallel demo environment, with 32 CPUs available"
    #     kubespawner_override:
    #       image: gcr.io/simula-odk/k8s-singular:0.0.1-111.92d59fa
    #       cpu_guarantee: 8
    #       cpu_limit: 32
    #       mem_limit: 16G
    #       node_affinity_required:
    #         - matchExpressions:
    #             - key: jupyterhub-node
    #               operator: In
    #               values:
    #                 - hpc

    #   - display_name: "HPC GAP (lite)"
    #     description: "HPC GAP Parallel demo environment, with only 4 cpu cores for\
    #       \ testing"
    #     kubespawner_override:
    #       image: gcr.io/simula-odk/k8s-hpcgap:0.0.1-111.92d59fa
    #       cpu_guarantee: 4
    #       cpu_limit: 4
    #   - display_name: "HPC GAP Parallel"
    #     description: "HPC GAP Parallel demo environment, with 32 CPUs available"
    #     kubespawner_override:
    #       image: gcr.io/simula-odk/k8s-hpcgap:0.0.1-111.92d59fa
    #       cpu_guarantee: 8
    #       cpu_limit: 32
    #       mem_limit: 36G
    #       node_affinity_required:
    #         - matchExpressions:
    #             - key: jupyterhub-node
    #               operator: In
    #               values:
    #                 - hpc
    #   - display_name: "Real-time Collaboration"
    #     description: "Real-time collaboration demo image"
    #     kubespawner_override:
    #       image: gcr.io/simula-odk/k8s-rtc:0.0.1-111.92d59fa

    memory:
      limit: 3G
      guarantee: 1G
    cpu:
      limit: 2
      guarantee: 0.5
    schedulerStrategy: pack
    extraEnv:
      CULL_CONNECTED: '1'
      CULL_TIMEOUT: '900'
      CULL_KERNEL_TIMEOUT: '900'
      CULL_INTERVAL: '107'

  prePuller:
    hook:
      enabled: false
    continuous:
      enabled: true

  hub:
    nodeSelector:
      cloud.google.com/gke-nodepool: default-pool
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: /hub/metrics
    extraConfig:
      slowSpawn: |
        c.JupyterHub.tornado_settings.update({'slow_spawn_timeout': 1})
      noAuthMetrics: |
        c.JupyterHub.authenticate_prometheus = False
      namedServers: c.JupyterHub.allow_named_servers = True
  scheduling:
    userScheduler:
      enabled: true
    podPriority:
      enabled: true
    userPlaceholder:
      enabled: true
      replicas: 2

grafana:
  nodeSelector:
    cloud.google.com/gke-nodepool: default-pool
  grafana.ini:
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Viewer
    auth.basic:
      enabled: true
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/issuer: "letsencrypt-prod"
    hosts:
      - grafana.lorentz.minrk.net
    tls:
      - hosts:
          - grafana.lorentz.minrk.net
        secretName: tls-grafana
  persistence:
    size: 2Gi
    enabled: true
    accessModes:
      - ReadWriteOnce
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: prometheus
          orgId: 1
          type: prometheus
          url: https://prometheus.lorentz.minrk.net
          access: direct
          isDefault: true
          editable: false

prometheus:
  nodeSelector:
    cloud.google.com/gke-nodepool: default-pool
  nodeExporter:
    updateStrategy:
      type: RollingUpdate
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  rbac:
    create: true
  server:
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: "letsencrypt-prod"
      hosts:
        - prometheus.lorentz.minrk.net
      tls:
        - hosts:
            - prometheus.lorentz.minrk.net
          secretName: tls-prometheus

acme:
  email: benjaminrk@simula.no

nginx-ingress:
  nodeSelector:
    cloud.google.com/gke-nodepool: default-pool
  rbac:
    create: true
  statsExporter:
    service:
      annotations:
        prometheus.io/scrape: "true"
  controller:
    replicaCount: 2
    scope:
      enabled: true
    config:
      # Allow POSTs of upto 64MB, for large notebook support.
      proxy-body-size: 64m
    stats:
      enabled: true
    service:
      # Preserve client IPs
      externalTrafficPolicy: Local
      loadBalancerIP: 35.205.90.242
      # preserve healthcheck port
      # this shouldn't be needed, but it's erroring on 0
      healthCheckNodePort: 30278
